import 'package:appointment/src/app/model/configuration.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flexurio_erp_core/flexurio_erp_core.dart' as core;
import 'package:flutter/material.dart';
import 'package:form_field_validator/form_field_validator.dart';

class EntityField {
  final String label;
  final String reference;
  final String type;
  final double? columnWidth;
  final bool? autoGenerated;
  final bool? required;
  final String? pattern;
  final int? minLength;
  final int? maxLength;
  final bool? allowCreate;
  final bool? allowUpdate;
  final FieldOptions? options;

  EntityField({
    required this.label,
    required this.reference,
    required this.type,
    this.columnWidth,
    this.autoGenerated,
    this.required,
    this.pattern,
    this.minLength,
    this.maxLength,
    this.allowCreate,
    this.allowUpdate,
    this.options,
  });

  factory EntityField.fromJson(Map<String, dynamic> json) {
    return EntityField(
      columnWidth: (json['column_width'] as num?)?.toDouble(),
      label: json['label'],
      reference: json['reference'],
      type: json['type'],
      autoGenerated: json['auto_generated'],
      required: json['required'],
      pattern: json['pattern'],
      minLength: json['min_length'],
      maxLength: json['max_length'],
      allowCreate: json['allow_create'],
      allowUpdate: json['allow_update'],
      options: json['options'] != null
          ? FieldOptions.fromJson(json['options'])
          : null,
    );
  }

  Widget buildForm(core.DataAction action, TextEditingController? controller) {
    final enabled = _enabled(action);
    return core.FTextFormField(
      labelText: label,
      enabled: _enabled(action),
      controller: controller,
      validator: MultiValidator([
        if (required ?? false) core.requiredValidator,
        core.LengthValidator(
          minLength: minLength,
          maxLength: maxLength,
        ),
      ]),
    );
  }

  static Widget buildDisplay(Entity entity, String label, dynamic value) {
    final field = entity.fields.firstWhere((e) => e.reference == label);
    if (field.type == 'number') {
      return Text(value.toString());
    } else if (field.isDateTime) {
      final date = DateTime.parse(value);
      return Text(DateFormat(field.dateTimeFormat).format(date));
    } else {
      return Text(value);
    }
  }

  bool _enabled(core.DataAction action) {
    if (action == core.DataAction.create) {
      return allowCreate ?? false;
    } else if (action == core.DataAction.edit) {
      return allowUpdate ?? false;
    } else {
      return false;
    }
  }

  bool get isDateTime => type.contains('datetime');

  String get dateTimeFormat {
    final regex = RegExp(r'datetime\((.*?)\)');
    final matches = regex.allMatches(type);

    for (final match in matches) {
      return match.group(1) as String;
    }
    throw Exception('Invalid datetime format');
  }

  Map<String, dynamic> toJson() {
    return {
      'column_width': columnWidth,
      'label': label,
      'reference': reference,
      'type': type,
      'auto_generated': autoGenerated,
      'required': required,
      'pattern': pattern,
      'min_length': minLength,
      'max_length': maxLength,
      'allow_create': allowCreate,
      'allow_update': allowUpdate,
      'options': options?.toJson(),
    };
  }
}

class FieldOptions {
  final String source;
  final String labelField;
  final String valueField;

  FieldOptions({
    required this.source,
    required this.labelField,
    required this.valueField,
  });

  factory FieldOptions.fromJson(Map<String, dynamic> json) {
    return FieldOptions(
      source: json['source'],
      labelField: json['label_field'],
      valueField: json['value_field'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'source': source,
      'label_field': labelField,
      'value_field': valueField,
    };
  }
}
